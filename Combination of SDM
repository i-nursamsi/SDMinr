# Author = Ilyas Nursamsi
# Species distribution modeling/ ENM for Selaginella Plana in Seven model types
# model = Bioclim, mahal, GAM, GLM, Maxent, SVM, RF

#empty list environment
rm(list = ls())

#setting the workspace
setwd("D:/Riset/MaxentSelaginella/newpaperproject_part2/MakalahVI/Workspace_R2")

# Load additional packages
library("mgcv")
library(kernlab)
library("sp")
library("raster")
library("maptools")
library("rgdal")
library("dismo")
library("rJava")

#read S_plana csv file
obs.data <- read.csv(file = "data3/Selaginella_plana.csv", sep = ",")

# Load the data to use for our base map
shp <- readOGR(dsn = ".", layer = "SEA")

#import the raster variables 
#import bio_1
bio1<-'data3/tif/bio_1.tif' 
imported_raster=raster(bio1)
bio_1 = imported_raster

#import bio_2
bio2<-'data3/tif/bio_2.tif' 
bio_2=raster(bio2)

#import bio_3
bio3<-'data3/tif/bio_3.tif' 
bio_3=raster(bio3)

#import bio_4
bio4<-'data3/tif/bio_4.tif' 
bio_4=raster(bio4)

#import bio_12
bio12<-'data3/tif/bio_12.tif' 
bio_12=raster(bio12)

#import bio_19
bio19<-'data3/tif/bio_19.tif' 
bio_19=raster(bio19)

#import soil_carbon
soilcarbon<-'data3/tif/soil_carbon.tif' 
soil_carbon=raster(soilcarbon)

#import soil_ph
soilph<-'data3/tif/soil_ph.tif' 
soil_ph=raster(soilph)

#import alt
alt1<-'data3/tif/alt.tif' 
alt=raster(alt1)

#stacking all the files
predictors <- stack(bio_1,bio_2,bio_3,bio_4,bio_12,bio_19,soil_carbon,soil_ph,alt)

# Determine geographic extent of our data
max.lat <- ceiling(max(30))
min.lat <- floor(min(-11))
max.lon <- ceiling(max(145))
min.lon <- floor(min(90))
geographic.extent <- extent(x = c(min.lon, max.lon, min.lat, max.lat))

#create Pseudo-absence for BIOCLIM, MAHAL, MAXENT
# Create pseudo-absence, or background, points
# Use the bioclim data files for sampling resolution
tif.files <- list.files(path = "data3/tif", 
                        pattern = "*.tif$", 
                        full.names = TRUE)

# We only need one file, so use the first one in the list of .tif files
mask <- raster(tif.files[1])

# Randomly sample points (same number as our observed points)
background <- randomPoints(mask = mask,     # Provides resolution of sampling points
                           n = nrow(obs.data),      # Number of random points
                           ext = geographic.extent, # Spatially restricts sampling
                           extf = 1.25)             # Expands sampling a little bit

# Arbitrarily assign group 1 as the testing data group
testing.group <- 1

# Create vector of group memberships
group.presence <- kfold(x = obs.data, k = 5) # kfold is in dismo package

# Separate observations into training and testing groups
presence.train <- obs.data[group.presence != testing.group, ]
presence.test <- obs.data[group.presence == testing.group, ]

# Repeat the process for pseudo-absence points
group.background <- kfold(x = background, k = 5)
background.train <- background[group.background != testing.group, ]
background.test <- background[group.background == testing.group, ]

#Pseudo-absence for SVM, RF, GLM, GAM
# Create pseudo-absence, or background, points
# Use the bioclim data files for sampling resolution
tif.files <- list.files(path = "data3/tif", 
                        pattern = "*.tif$", 
                        full.names = TRUE)

# We only need one file, so use the first one in the list of .tif files
mask <- raster(tif.files[1])

# Randomly sample points (same number as our observed points)
background <- randomPoints(mask = mask,     # Provides resolution of sampling points
                           n = 1000,      # Number of random points
                           ext = geographic.extent, # Spatially restricts sampling
                           extf = 1.25)             # Expands sampling a little bit

# Arbitrarily assign group 1 as the testing data group
testing.group <- 1

# Create vector of group memberships
group.presence <- kfold(x = obs.data, k = 5) # kfold is in dismo package

# Separate observations into training and testing groups
presence.train <- obs.data[group.presence != testing.group, ]
presence.test <- obs.data[group.presence == testing.group, ]

# Repeat the process for pseudo-absence points
group.background <- kfold(x = background, k = 5)
background.train <- background[group.background != testing.group, ] 
background.test <- background[group.background == testing.group, ]

#rewrite and recall background.train as csv
background.train <- write.csv(background.train, "background_train2.csv", sep = "," ) #coba jangan dipakai
background.train = read.csv(file = "background_train2.csv", sep = ",")

#extracting environmental values and bind it with bg and presence train
#if there is an error explaining that the name is not the same, open the background_train.csv and
#then change the head name, and make it the same as Selaginella_plana.csv
train <- rbind(presence.train, background.train[,2:3])
pb_train <- c(rep(1, nrow(presence.train)), rep(0, nrow(background.train[,2:3])))
envtrain <- raster::extract(predictors, train)
envtrain <- data.frame( cbind(pa=pb_train, envtrain) )

#extracting environmental values and bind it with bg and presence test
testpres <- data.frame( raster::extract(predictors, presence.test) )
testbackg <- data.frame( raster::extract(predictors, background.test ) )

# Build a model using training data
bc.model <- dismo::bioclim(x = predictors, 
                           p = presence.train,
                           a = background.train,
                           args = c("replicates=100"))

# Predict presence from model
predict.presence <- dismo::predict(object = bc.model, 
                                   x = predictors, 
                                   ext = geographic.extent)


# Use testing data for model evaluation
bc.eval <- dismo::evaluate(p = presence.test,   # The presence testing data
                           a = background.test, # The background testing data
                           model = bc.model,    # The model we are evaluating
                           x = predictors)    # Climatic variables for use by model

as.list(bc.eval)
pred = write_xlsx(bc.eval, "eval001.xlsx")


# Determine minimum threshold for "presence"
bc.threshold <- threshold(x = bc.eval, stat = "equal_sens_spec")

# Predict presence from model
predict.presence <- dismo::predict(x = predictors,
                                   object = mhl.model,
                                   ext = geographic.extent)

# Use testing data for model evaluation
mhl.eval <- evaluate(p = presence.test,   # The presence testing data
                     a = background.test, # The background testing data
                     model = mhl.model,    # The model we are evaluating
                     x = predictors)    # Climatic variables for use by model

# Determine minimum threshold for "presence"
mhl.threshold <- threshold(x = mhl.eval, stat = "equal_sens_spec")

#Build RandomForest model
model <- pa ~ bio_1 + bio_2 + bio_3 + bio_4 + bio_12 + bio_19 + soil_carbon + soil_ph + alt
svm <- ksvm(model, data=envtrain, na.action=na.exclude)

# Predict presence from logisic Regression model
predict.presence <- dismo::predict(predictors, svm, ext=geographic.extent)

# Use testing data for model evaluation
svm.eval <- dismo::evaluate(p = testpres,   # The presence testing data
                            a = testbackg, # The background testing data
                            model = svm)    # The model we are evaluating    

# Determine minimum threshold for "presence"
svm.threshold <- threshold(x = svm.eval, stat = "equal_sens_spec")

#Build RandomForest model
model <- pa ~ bio_1 + bio_2 + bio_3 + bio_4 + bio_12 + bio_19 + soil_carbon + soil_ph + alt
rf1 <- randomForest::randomForest(model, data=envtrain,
                                  na.action=na.exclude)
# Predict presence from logisic Regression model
predict.presence <- dismo::predict(predictors, rf1, ext=geographic.extent)

# Use testing data for model evaluation
rf.eval <- evaluate(p = testpres,   # The presence testing data
                    a = testbackg, # The background testing data
                    model = rf1)    # The model we are evaluating

#logisic Regression glm, best family = family = binomial(link = "logit")
gm1 <- glm(pa ~ bio_1 + bio_2 + bio_3 + bio_4 + bio_12 + bio_19 + soil_carbon + soil_ph + alt,
           family = binomial(link = "logit"), data=envtrain)
ge2 <- evaluate(testpres, testbackg, gm1)

# Predict presence from logisic Regression model
predict.presence <- dismo::predict(predictors, gm1, ext=geographic.extent)

# Use testing data for model evaluation
glm.eval <- evaluate(p = testpres,   # The presence testing data
                     a = testbackg, # The background testing data
                     model = gm1)    # The model we are evaluating    

#logisic Regression gam, best family = family = binomial(link = "logit")
gam1 <- gam(pa ~ bio_1 + bio_2 + bio_3 + bio_4 + bio_12 + bio_19 + soil_carbon + soil_ph + alt,
            family = binomial(link = "logit"), data=envtrain)

# Predict presence from logisic Regression model
predict.presence <- dismo::predict(predictors, gam1, ext=geographic.extent)

# Use testing data for model evaluation
gam.eval <- evaluate(p = testpres,   # The presence testing data
                     a = testbackg, # The background testing data
                     model = gam1)    # The model we are evaluating    

# Build a model using training data
mx.model <- dismo::maxent(predictors,
                          p = presence.train,
                          a = background.train,
                          args=c("betamultiplier=2","nohinge","nothreshold","replicates=5","nooutputgrids"))

# Predict presence from model
predict.presence <- dismo::predict(object = mx.model, 
                                   x = predictors, 
                                   ext = geographic.extent)

# Use testing data for model evaluation
mx.eval <- dismo::evaluate(p = presence.test,   # The presence testing data
                           a = background.test, # The background testing data
                           model = mx.model,    # The model we are evaluating
                           x = predictors)    # Climatic variables for use by model

# Determine minimum threshold for "presence"
mxt.threshold <- threshold(x = mx.eval, stat = "equal_sens_spec")

#write result as raster (you can change value whether to include all of the values or the above thershold only)
rtr = writeRaster(predict.presence > bc.threshold, filename="whateversdm.tif",
                  format="GTiff",
                  overwrite=TRUE)

#impose coordinate refference (current version may involve too many unnecessary steps)
#import tif
bioc<-"D:/Riset/MaxentSelaginella/newpaperproject_part2/MakalahVI/Workspace_R/whateversdm.tif" 
whateversdm_result=raster(bioc)

#impose geographic CRS
projection(bioclim_result) <- "+proj=longlat +datum=WGS84" 

#write out the raster again
rast = writeRaster(bioclim_result, filename="whateversdm_proj.tif",
                   format="GTiff",
                   overwrite=TRUE)
